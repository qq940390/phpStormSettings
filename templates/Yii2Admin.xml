<templateSet group="Yii2Admin">
  <template name="apidocf" value="/**&#10; * @api {POST} /path$END$ 接口名称&#10; * @apiGroup groupname&#10; * @apiVersion 1.0.0&#10; *&#10; * @apiDescription 接口描述&#10; *&#10; * @apiHeader {String} Authorization Bearer Token 验证&#10; * @apiHeaderExample {json} Header例子：&#10; *  {&#10; *      &quot;Authorization&quot;: &quot;Bearer {&quot;uid&quot;:1,&quot;app_id&quot;:0,&quot;sign&quot;:&quot;WI2yExE......ZrAtFg==&quot;}&quot;&#10; *  }&#10; *&#10; * @apiParam (Body form-data) {Number} param1 参数说明1&#10; * @apiParam (Body form-data) {String} param2 参数说明2&#10; *&#10; * @apiParamExample {String[]} 请求数据示例:&#10; * param1=&quot;911&quot;;&#10; * param2=&quot;922&quot;; &#10; *&#10; * @apiSuccess (成功 [HTTP状态码 200]) {Number} code码，200：请求成功&#10; * @apiSuccess (成功 [HTTP状态码 200]) {String} message 提示信息&#10; * @apiSuccess (成功 [HTTP状态码 200]) {Object} data 返回的数据对象&#10; * @apiSuccess (成功 [HTTP状态码 200]) {Number} data.age data.age&#10; * @apiSuccess (成功 [HTTP状态码 200]) {String} data.image data.image&#10; *&#10; * @apiSuccessExample {json} 成功后返回的数据示例:&#10; *  {&#10; *      &quot;code&quot;: 200,&#10; *      &quot;message&quot;: &quot;&quot;,&#10; *      &quot;data&quot;: {&#10; *          &quot;age&quot;: 30,&#10; *          &quot;image&quot;: &quot;http://***&quot;&#10; *      }&#10; *  }&#10; *&#10; * @apiError (失败 [HTTP状态码 200]) {Number} code 错误码&#10; * @apiError (失败 [HTTP状态码 200]) {String} message 错误消息&#10; *&#10; * @apiErrorExample {json} 失败后返回的数据示例:&#10; *  {&#10; *      &quot;code&quot;: 9999,&#10; *      &quot;message&quot;: &quot;其他错误&quot;,&#10; *      &quot;data&quot;: {}&#10; *  }&#10; *&#10; */" description="ApiDoc 接口注释" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP Class Member" value="true" />
      <option name="PHP Comment" value="true" />
    </context>
  </template>
  <template name="apidocj" value="/**&#10; * @api {POST} /path$END$ 接口名称&#10; * @apiGroup groupname&#10; * @apiVersion 1.0.0&#10; *&#10; * @apiDescription 接口描述&#10; *&#10; * @apiHeader {String} Authorization Bearer Token 验证&#10; * @apiHeaderExample {json} Header例子：&#10; *  {&#10; *      &quot;Authorization&quot;: &quot;Bearer {&quot;uid&quot;:1,&quot;app_id&quot;:0,&quot;sign&quot;:&quot;WI2yExE......ZrAtFg==&quot;}&quot;&#10; *  }&#10; *&#10; * @apiParam (Body/json) {Number} param1 参数说明1&#10; * @apiParam (Body/json) {String} param2 参数说明2&#10; *&#10; * @apiParamExample {json} 请求数据示例:&#10; *  {&#10; *      &quot;param1&quot;: 911,&#10; *      &quot;param2&quot;: &quot;911&quot;&#10; *  }&#10; *&#10; * @apiSuccess (成功 [HTTP状态码 200]) {Number} code码，0：请求成功&#10; * @apiSuccess (成功 [HTTP状态码 200]) {String} message 提示信息&#10; * @apiSuccess (成功 [HTTP状态码 200]) {Object} data 返回的数据对象&#10; * @apiSuccess (成功 [HTTP状态码 200]) {Number} data.age data.age&#10; * @apiSuccess (成功 [HTTP状态码 200]) {String} data.image data.image&#10; *&#10; * @apiSuccessExample {json} 成功后返回的数据示例:&#10; *  {&#10; *      &quot;code&quot;: 200,&#10; *      &quot;message&quot;: &quot;&quot;,&#10; *      &quot;data&quot;: {&#10; *          &quot;age&quot;: 30,&#10; *          &quot;image&quot;: &quot;http://***&quot;&#10; *      }&#10; *  }&#10; *&#10; * @apiError (失败 [HTTP状态码 200]) {Number} code 错误码&#10; * @apiError (失败 [HTTP状态码 200]) {String} message 错误消息&#10; *&#10; * @apiErrorExample {json} 失败后返回的数据示例:&#10; *  {&#10; *      &quot;code&quot;: 9999,&#10; *      &quot;message&quot;: &quot;其他错误&quot;,&#10; *      &quot;data&quot;: {}&#10; *  }&#10; *&#10; */" description="ApiDoc 接口注释" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP Class Member" value="true" />
      <option name="PHP Comment" value="true" />
    </context>
  </template>
  <template name="valid_attr_func" value="/**&#10; * 验证&#10; *&#10; * @param string $attribute&#10; * @param array $params&#10; */&#10;public function valid$END$($attribute, $params)&#10;{&#10;    if(empty($this-&gt;$attribute)) {&#10;        $this-&gt;addError($attribute, '不能为空');&#10;    }&#10;}" description="模型中用于自定义验证的方法" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP Class Member" value="true" />
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="rscreturn" value="//id无效时，表示启用防重复提交功能，并返回 _rsc_value 值&#10;return $this-&gt;success('成功', ['_rsc_value' =&gt; $this-&gt;repeatSubmitCheckInit('add')]);" description="防止重复提交初始化" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="modelpagecode" value="$pager = new Pagination([&#10;    'totalCount' =&gt; $total,&#10;    'defaultPageSize' =&gt; 10,&#10;    'pageParam' =&gt; 'page',&#10;    'pageSizeParam' =&gt; 'size',&#10;]);" description="数据列表分页实例代码" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="modelfilter" value="//允许检索的字段&#10;$filterAccess = [&#10;    'username' =&gt; 'like',&#10;    'realname' =&gt; 'like',&#10;    'nickname' =&gt; 'like',&#10;];&#10;$model = G::doModelFilter($model, $filterAccess);" description="Model搜索过滤" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="funcadd" value="public function actionAdd()&#10;{&#10;    $this-&gt;checkPostMethod();&#10;&#10;    $post = G::bodyData();&#10;&#10;    $model = new $END$;&#10;    $model-&gt;scenario = 'create';&#10;    $model-&gt;setAttributes($post);&#10;&#10;    $model-&gt;last_ip = '0';&#10;    $model-&gt;last_at = 0;&#10;    $model-&gt;created_at = G::time();&#10;    $model-&gt;updated_at = G::time();&#10;&#10;    if (!$model-&gt;validate() || !$this-&gt;checkRepeatSubmit() || !$model-&gt;save()) {&#10;        return $this-&gt;error(Error::INVALID_DATA_FORMAT, current($model-&gt;firstErrors));&#10;    }&#10;    return $this-&gt;success('操作成功');&#10;}" description="添加内容默认方法" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="funcdelete" value="public function actionDelete()&#10;{&#10;    $this-&gt;checkPostMethod();&#10;&#10;    $id = G::bodyData('id');&#10;    if (!$id) {&#10;        return $this-&gt;error(Error::INVALID_ARGS, '参数错误');&#10;    }&#10;&#10;    $model = SystemMenu::findOne($id);&#10;    if (!$model) {&#10;        return $this-&gt;error(Error::DATA_NOT_FOUND, '数据不存在');&#10;    }&#10;&#10;    if (!$model-&gt;delete()) {&#10;        return $this-&gt;error(Error::INVALID_DATA_FORMAT, current($model-&gt;firstErrors));&#10;    }&#10;&#10;    SystemMenuService::updateCache();&#10;&#10;    return $this-&gt;success('操作成功');&#10;}" description="删除内容默认方法" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="funcedit" value="public function actionEdit()&#10;{&#10;    $this-&gt;checkPostMethod();&#10;    $post = G::bodyData();&#10;    $id = JParse::uint($post['mid']);&#10;    if (!$id) {&#10;        return $this-&gt;error(Error::INVALID_ARGS, '无效的参数');&#10;    }&#10;&#10;    $model = SystemMenu::findOne($id);&#10;    if (!$model) {&#10;        return $this-&gt;error(Error::DATA_NOT_FOUND, '数据不存在');&#10;    }&#10;    $oldName = $model-&gt;name;&#10;&#10;    $post = $this-&gt;processPost($post);&#10;    $model-&gt;setAttributes($post);&#10;    if (!$model-&gt;save()) {&#10;        return $this-&gt;error(Error::INVALID_DATA_FORMAT, current($model-&gt;firstErrors));&#10;    }&#10;&#10;    SystemMenuService::updateCache();&#10;&#10;    return $this-&gt;success('操作成功');&#10;}" description="修改内容默认方法" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="funcload" value="public function actionLoad()&#10;{&#10;    $id = G::getUint('id');&#10;    if (!$id) {&#10;        //id无效时，表示启用防重复提交功能，并返回 _rsc_value 值&#10;        return $this-&gt;success('成功', ['_rsc_value' =&gt; $this-&gt;repeatSubmitCheckInit('add')]);&#10;    }&#10;&#10;    $data = SystemMenuService::loadData($id);&#10;    if(!$data) {&#10;        return $this-&gt;error(Error::DATA_NOT_FOUND, '数据不存在');&#10;    }&#10;&#10;    return $this-&gt;success($id, $data);&#10;}" description="加载内容默认方法" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="funcorder" value="public function actionUpdateListOrder()&#10;{&#10;    $this-&gt;checkPostMethod();&#10;&#10;    $post = G::bodyData();&#10;    if (empty($post)) {&#10;        return $this-&gt;error(Error::INVALID_ARGS, '参数错误');&#10;    }&#10;&#10;    $count = 0;&#10;    foreach ($post as $item) {&#10;        $count += SystemMenu::updateAll(['list_order' =&gt; intval($item['order'])], ['mid' =&gt; intval($item['id'])]);&#10;    }&#10;&#10;    SystemMenuService::updateCache();&#10;&#10;    return $this-&gt;success($count . ' 项更新排序成功', $post);&#10;}" description="更新排序默认方法" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="fd" value="/**&#10; * $END$&#10; *&#10; * @author wujinhai, 940390@qq.com&#10; * @website http://wujinhai.cn&#10; * @github https://github.com/qq940390&#10; */" description="PHP文件头部" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
      <option name="PHP Class Member" value="false" />
      <option name="PHP Expression" value="false" />
      <option name="PHP String Literal" value="false" />
    </context>
  </template>
</templateSet>